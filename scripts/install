#!/bin/bash
set -euo pipefail

# Set global RUSTFLAGS to suppress warnings
export RUSTFLAGS="-Awarnings"

printf "Initializing Git submodules... "
git submodule update --init --recursive
printf "Done\n"

printf "Installing Abra CLI to Cargo bin... "
cargo install --bin abra --path cli --quiet || {
  printf "Failed!\n"
  echo "Failed to install Abra CLI. Please check your Rust installation." >&2
  exit 1
}
printf "Done\n"

printf "Building native Abra modules...\n"
for dir in modules/*; do
  if [ -d "$dir" ] && [ -f "$dir/Cargo.toml" ]; then
    printf "  - building $dir ... "
    pushd "$dir" > /dev/null
    if cargo build --release --quiet; then
      printf "Done\n"
    else
      printf "Failed!\n"
      echo "Build failed in $dir. Please check the project for errors." >&2
      exit 1
    fi
    popd > /dev/null
  fi
done

printf "Installing Abra modules... "
mkdir -p "$HOME/.abra"
rm -rf "$HOME/.abra/modules"
cp -R modules "$HOME/.abra/modules"
printf "Done\n"

VIM_DIR="$HOME/.vim"
if [ -d "$VIM_DIR" ]; then
  printf "Installing Vim syntax highlighting... "
  mkdir -p "$VIM_DIR/syntax"
  mkdir -p "$VIM_DIR/ftdetect"
  cp ./tooling/vim/syntax.vim "$VIM_DIR/syntax/abra.vim"
  cp ./tooling/vim/ftdetect.vim "$VIM_DIR/ftdetect/abra.vim"
  printf "Done\n"
else
  echo "Vim configuration directory not found. Skipping Vim syntax highlighting installation."
fi

install_abra_vscode_extension() {
  if ! command -v code &> /dev/null; then
    echo "VS Code ('code' command) not found. Skipping Abra VS Code extension installation."
    return
  fi

  printf "Installing Abra VS Code extension...\n"

  if ! command -v npm &> /dev/null; then
    echo "'npm' not found. Please install Node.js and npm to proceed." >&2
    return 1
  fi

  if ! command -v vsce &> /dev/null; then
    printf "  - Installing 'vsce' tool... "
    npm install -g @vscode/vsce --quiet || {
      printf "Failed!\n"
      echo "Failed to install 'vsce'. Please check your npm setup." >&2
      return 1
    }
    printf "Done\n"
  fi

  pushd tooling/vscode > /dev/null
  printf "  - Packaging VS Code extension... "
  if vsce package --allow-missing-repository > /dev/null 2>&1; then
    printf "Done\n"
  else
    printf "Failed!\n"
    echo "Failed to package the VS Code extension. Please check the 'vsce' setup." >&2
    popd > /dev/null
    return 1
  fi

  printf "  - Installing extension... "
  if code --install-extension abra-0.0.1.vsix --force > /dev/null 2>&1; then
    printf "Done\n"
  else
    printf "Failed!\n"
    echo "Failed to install the Abra VS Code extension. Please check VS Code permissions." >&2
    popd > /dev/null
    return 1
  fi

  popd > /dev/null
}

install_abra_vscode_extension

printf "\nSetup complete! Abra is ready to use."
echo " To get started:"
echo "- Run \`abra --help\` to see available options."
echo "- Create a new Abra program and run it with \`abra <filename>.abra\`."

