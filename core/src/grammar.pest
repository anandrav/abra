WHITESPACE = _{ space | tab | newline | COMMENT }
space = { " " }
tab = { "\t" }
newline = { "\n" }

COMMENT = _{ LINE_COMMENT | MULTI_LINE_COMMENT }
LINE_COMMENT = _{ "//" ~ (!newline ~ ANY)* ~ newline? }
MULTI_LINE_COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

file = _{ SOI ~ file_item* ~ EOI }

file_item = _{ func_def | foreign_func_decl | interface_declaration | interface_implementation | enum_declaration | struct_declaration /*| typealias*/ | foreign_type_decl | import | statement }

// typealias = { "type" ~ identifier ~ "=" ~ typ}

import = { "use" ~ identifier }

interface_declaration = { "interface" ~ identifier ~ interface_body }
interface_body = _{ "{" ~ interface_property* ~ "}" }
interface_property = { func_keyword ~ identifier ~ type_annotation }

interface_implementation = { "implement" ~ identifier ~ "for" ~ typ ~ interface_implementation_body }
interface_implementation_body = _{ "{" ~ func_def* ~ "}" }

enum_declaration = { "type" ~ identifier ~ type_params? ~ "=" ~ variant ~ ("|" ~ variant)* }
type_params = _{ "<" ~ (type_poly ~ ",")* ~ type_poly? ~ ">" }
variant = { identifier ~ packed_data? }
packed_data = _{ "of" ~ typ }

struct_declaration = { "type" ~ identifier ~ type_params? ~ "=" ~ "{" ~ struct_field ~ ("," ~ struct_field)* ~ "}" }
struct_field = { identifier ~ type_annotation }

foreign_type_decl = { "foreign" ~ "type" ~ identifier }

statement = _{ let_statement | var_statement | set_statement | expression_statement }

let_statement = { let_keyword ~ let_pattern_annotated ~ op_assign ~ expression }
let_keyword = _{ "let" }
expression_statement = { expression }
let_pattern = _{ let_pattern_tuple | wildcard | identifier }
wildcard = @{ "_" }
op_assign = _{ "=" }

var_statement = { var_keyword ~ let_pattern_annotated ~ op_assign ~ expression }
var_keyword = _{ "var" }

set_statement = { expression ~ "<-" ~ expression }

func_def = { func_keyword ~ identifier ~ func_args ~ func_out_annotation? ~ (block_expression | (op_assign ~ expression)) }
func_keyword = _{ "fn" }

foreign_func_decl = { "foreign" ~ func_keyword ~ identifier ~ func_args ~ func_out_annotation }

let_pattern_tuple = { tuple_start ~ (let_pattern_tuple_element ~ ",")+ ~ let_pattern_tuple_element ~ tuple_end }
let_pattern_tuple_element = _{ let_pattern }

expression = {  term ~ postfix* ~ (op_binary ~ term ~ postfix* )* }
term = _{ block_expression | func_expression | func_call_expression | parenthesized_expression | if_else_expression | while_loop_expression | match_expression | tuple_expr | primary_expression }
postfix = _{ index_access }

index_access = { "[" ~ expression ~ "]" }

if_else_expression = { if_keyword ~ expression ~ expression ~ (else_keyword ~ expression)? }
if_keyword = _{ "if" }
else_keyword = _{ "else" }

while_loop_expression = { while_keyword ~ expression ~ expression }
while_keyword = _{ "while" }

match_expression = { "match" ~ expression ~ "{" ~ match_branch ~ (match_branch)* ~ "}" }
match_branch = { match_pattern ~ "->" ~ expression }

match_pattern = { match_pattern_parenthesized | literal | wildcard | match_pattern_tuple | match_pattern_variant | match_pattern_variable }
match_pattern_tuple = { tuple_start ~ (match_pattern_tuple_element ~ ",")+ ~ match_pattern_tuple_element ~ tuple_end }
match_pattern_tuple_element = _{ match_pattern }
match_pattern_variant = { identifier ~ match_pattern_variant_data? }
match_pattern_variant_data = _{ match_pattern }
match_pattern_variable = @{ "~" ~ (alpha | "_") ~ (alphanumeric | "_")* }
match_pattern_parenthesized = _{ paren_start ~ match_pattern ~ paren_end }

block_expression = { block_start ~ statement* ~ block_end }
block_start = _{ "{" }
block_end = _{ "}" }

tuple_expr = { tuple_start ~ (tuple_expr_element ~ ",")+ ~ tuple_expr_element ~ tuple_end }
tuple_start = _{ "(" }
tuple_end = _{ ")" }
tuple_expr_element = _{ expression }

parenthesized_expression = _{ paren_start ~ expression ~ paren_end }
paren_start = _{ "(" }
paren_end = _{ ")" }

func_call_expression = ${ primary_expression ~ func_call_args }
func_call_args = !{ func_call_args_start ~ (func_call_arg ~ ",")* ~ func_call_arg? ~ func_call_args_end }
func_call_args_start = _{ "(" }
func_call_args_end = _{ ")" }
func_call_arg = _{ expression }

func_expression = { func_expression_args ~ "->" ~ func_out_annotation? ~ expression }
func_out_annotation = { "->" ~ typ }
func_args_start = _{ "(" }
func_args_end = _{ ")" }
func_expression_args = _{ func_args | func_arg }
func_args = _{ func_args_start ~ (func_arg ~ ",")* ~ func_arg? ~ func_args_end }
func_arg = { let_pattern ~ (interface_annotation | type_annotation )?}

interface_annotation = { ":" ~ "impl" ~ identifier }

let_pattern_annotated = { let_pattern ~ type_annotation? }

type_annotation = _{ ":" ~ typ }
// typ = { type_term ~ (type_op_binary ~ type_term)* }
// type_term = _{ type_parenthesized | type_ap | tuple_type | type_literal }
typ = _{ type_parenthesized | type_ap | func_type | tuple_type | type_literal }
typ_not_func = _{ type_parenthesized | type_ap | tuple_type | type_literal }

type_parenthesized = _{ paren_start ~ typ ~ paren_end }

func_type = { func_type_args ~ "->" ~ typ }
func_type_args = _{ func_type_arg_list | typ_not_func }
func_type_arg_list = _{ "(" ~ (func_type_arg_single ~ ",")* ~ func_type_arg_single ~ ")" }
func_type_arg_single = _{ typ }

type_ap = { identifier ~ type_args }
type_args = _{ "<" ~ (typ ~ ",")* ~ typ? ~ ">" }

tuple_type = { tuple_start ~ (tuple_type_element ~ ",")+ ~ tuple_type_element ~ tuple_end }
tuple_type_element = _{ typ }

type_literal = _{ type_literal_unit | type_literal_int | type_literal_float | type_literal_bool | type_literal_string | type_poly | identifier }
type_poly = { type_poly_ident ~ interface_constraint* }
interface_constraint = { identifier }
type_poly_ident = @{ "'" ~ (alpha | "_") ~ (alphanumeric | "_")* } // 'a, 'b, 'c, etc.
type_literal_unit = @{ "void" }
type_literal_int = @{ "int" }
type_literal_float = @{ "float" }
type_literal_bool = @{ "bool" }
type_literal_string = @{ "string" }

// type_op_binary = _{ type_op_arrow }
// type_op_arrow = { "->" }

primary_expression = _{ literal | identifier }

identifier = @{ !(keyword ~ WHITESPACE) ~ ( alpha | "_") ~ (alphanumeric | "_")* }
alpha = _{ 'a'..'z' | 'A'..'Z' }
alphanumeric = _{ alpha | '0'..'9' }

literal = _{ literal_unit | literal_float | literal_int | literal_bool | literal_string | literal_list | literal_array }
literal_unit = @{ "()" }
literal_int = @{ ("-")? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }
literal_float = @{ ("-")? ~ ("0.0" | "0." | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT* | "." ~ ASCII_DIGIT+) }
literal_string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
literal_bool = @{ "true" | "false" }
literal_list = { "[|" ~ (expression ~ ",")* ~ expression? ~ "|]" }
literal_array = { "[" ~ (expression ~ ",")* ~ expression? ~ "]" }

op_binary = _{op_eq | op_gte | op_lte | op_gt | op_lt | op_addition | op_subtraction | op_multiplication | op_division | op_pow | op_and | op_or | op_mod | op_concat | op_access }
op_eq = { "=" }
op_gt = { ">" }
op_lt = { "<" }
op_gte = { ">=" }
op_lte = { "<=" }
op_addition = { "+" }
op_subtraction = { "-" }
op_multiplication = { "*" }
op_division = { "/" }
op_mod = { "mod" }
op_pow = { "^" }
op_concat = { "&" }
// op_not = { "not" }
op_and = { "and" }
op_or = { "or" }
op_access = { "." }
// op_range_inclusive = { "..." }
// op_range_exclusive = { "..<" }

// NOTE: When changing this code, make sure you don't have a subset of a word before
// another word. For example: { "type" | "typeof" } will never match "typeof"
keyword = @{
   "and" | "bool" | "else" | "false" | "fn" | "let" | "if" | "int" | "match" | "mod" | "or" | "set" | "string" | "type" | "nothing" | "true" | "void"
}

semicolon = _{ ";" }
