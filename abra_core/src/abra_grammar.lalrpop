use std::str::FromStr;
use parse_tree::*;
use types::*;
use operators::*;

grammar;

Int: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
}

Bool: bool = {
    "true" => true,
    "false" => false
}

Unit: () = {
    "()" => ()
}

Identifier: Identifier = {
    r"[a-zA-Z_.][.a-zA-Z_0-9']*(\.:[.+/*=-]+)?" => (<>).to_string()
}

Pat: Box<Pat> = {
    Identifier => Box::new(Pat::Var(<>))
}

Type: Type = {
    "()" => Type::Unit,
    "int" => Type::Int,
    "bool" => Type::Bool,
    "string" => Type::String
}

Rule: Rule = {
    "|" <pat:Pat> "->" <e:Expr> => (pat, e)
}

TypeAnn: Type = {
    ":" <t:Type> => t
}

TypeAnnFuncOut: Type = {
    "->" <t:Type> => t
}

pub Expr: Box<Expr> = {
    "let" <pat:Pat> "=" <e1:Expr> "in" <e2:Expr> => Box::new(Expr::Let(pat, None, e1, e2)),
    "let" <pat:Pat> ":" <typ:Type> "=" <e1:Expr> "in" <e2:Expr> => Box::new(Expr::Let(pat, Some(typ), e1, e2)),
    "func" "(" <id:Identifier> <t_in:TypeAnn?> ")" <t_out:TypeAnnFuncOut?> "{" <body:Expr> "}" => Box::new(Expr::Func(id, t_in, t_out, body)),
    "if" <e1:Expr> "then" <e2:Expr> "else" <e3:Expr> => Box::new(Expr::If(<>)),
    "match" <e1:Expr> "{" <rules:Rule*> "}" => Box::new(Expr::Match(e1, rules)),
    SemicolonOpExpr,
}

SemicolonOpExpr: Box<Expr> = {
    SemicolonOpExpr SemicolonOp SummandOpExpr => Box::new(Expr::BinOp(<>)),
    SummandOpExpr
}

SummandOpExpr: Box<Expr> = {
    SummandOpExpr SummandOp FactorOpExpr => Box::new(Expr::BinOp(<>)),
    FactorOpExpr
}

FactorOpExpr: Box<Expr> = {
    FactorOpExpr FactorOp Term => Box::new(Expr::BinOp(<>)),
    FuncApExpr
}

FuncApExpr: Box<Expr> = {
    <f:FuncApExpr> "(" <a:Expr> ")" => Box::new(Expr::FuncAp(f, a)),
    Term
}

Term: Box<Expr> = {
    Identifier => Box::new(Expr::Var(<>)),
    Unit => Box::new(Expr::Unit),
    Int => Box::new(Expr::Int(<>)),
    Bool => Box::new(Expr::Bool(<>)),
    "(" <Expr> ")",
}

FactorOp: BinOpcode = {
    "*" => BinOpcode::Multiply,
    "/" => BinOpcode::Divide
}

SummandOp: BinOpcode = {
    "+" => BinOpcode::Add,
    "-" => BinOpcode::Subtract,
}

SemicolonOp: BinOpcode = ";" => BinOpcode::Semicolon;