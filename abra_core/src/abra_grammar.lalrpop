use std::rc::Rc;
use std::str::FromStr;
use parse_tree::*;
use types::*;
use operators::*;

grammar;

Int: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
}

Bool: bool = {
    "true" => true,
    "false" => false
}

Str: String = {
    r#""[^"]*""# => {
      let a = <>;
      a[1..a.len()-1].to_string()
    }
};

Unit: () = {
    "()" => ()
}

Identifier: Identifier = {
    r"[a-zA-Z_.][.a-zA-Z_0-9']*(\.:[.+/*=-]+)?" => (<>).to_string()
}

Pat: Rc<Pat> = {
    Identifier => Rc::new(Pat::Var(<>))
}

Type: Rc<Type> = {
    <t_in:Type> "->" <t_out:TypePrimitive> => Rc::new(Type::Arrow(<>)),
    TypePrimitive
}

TypePrimitive: Rc<Type> = {
    "()" => Rc::new(Type::Unit),
    "int" => Rc::new(Type::Int),
    "bool" => Rc::new(Type::Bool),
    "string" => Rc::new(Type::String)
}

Rule: Rule = {
    "|" <pat:Pat> "->" <e:Expr> => (pat, e)
}

TypeAnn: Rc<Type> = {
    ":" <t:Type> => t
}

TypeAnnFuncOut: Rc<Type> = {
    "->" <t:Type> => t
}

pub Expr: Rc<Expr> = {
    "let" <pat:Pat> "=" <e1:Expr> "in" <e2:Expr> => Rc::new(Expr::Let(pat, None, e1, e2)),
    "let" <pat:Pat> ":" <typ:Type> "=" <e1:Expr> "in" <e2:Expr> => Rc::new(Expr::Let(pat, Some(typ), e1, e2)),
    "func" "(" <id:Identifier> <t_in:TypeAnn?> ")" <t_out:TypeAnnFuncOut?> "{" <body:Expr> "}" => Rc::new(Expr::Func(id, t_in, t_out, body)),
    "if" <e1:Expr> "{" <e2:Expr> "} else {" <e3:Expr> "}" => Rc::new(Expr::If(<>)),
    "match" <e1:Expr> "{" <rules:Rule*> "}" => Rc::new(Expr::Match(e1, rules)),
    SemicolonOpExpr,
}

SemicolonOpExpr: Rc<Expr> = {
    SemicolonOpExpr SemicolonOp EqualityOpExpr => Rc::new(Expr::BinOp(<>)),
    EqualityOpExpr
}

EqualityOpExpr: Rc<Expr> = {
    EqualityOpExpr EqualityOp ComparisonOpExpr => Rc::new(Expr::BinOp(<>)),
    ComparisonOpExpr
}

ComparisonOpExpr: Rc<Expr> = {
    ComparisonOpExpr ComparisonOp SummandOpExpr => Rc::new(Expr::BinOp(<>)),
    SummandOpExpr
}

SummandOpExpr: Rc<Expr> = {
    SummandOpExpr SummandOp FactorOpExpr => Rc::new(Expr::BinOp(<>)),
    FactorOpExpr
}

FactorOpExpr: Rc<Expr> = {
    FactorOpExpr FactorOp Term => Rc::new(Expr::BinOp(<>)),
    FuncApExpr
}

FuncApExpr: Rc<Expr> = {
    <f:FuncApExpr> "(" <a:Expr> ")" => Rc::new(Expr::FuncAp(f, a)),
    Term
}

Term: Rc<Expr> = {
    Identifier => Rc::new(Expr::Var(<>)),
    Unit => Rc::new(Expr::Unit),
    Int => Rc::new(Expr::Int(<>)),
    Bool => Rc::new(Expr::Bool(<>)),
    Str => Rc::new(Expr::Str(<>)),
    "(" <Expr> ")",
}

FactorOp: BinOpcode = {
    "*" => BinOpcode::Multiply,
    "/" => BinOpcode::Divide
}

SummandOp: BinOpcode = {
    "+" => BinOpcode::Add,
    "-" => BinOpcode::Subtract,
}

EqualityOp: BinOpcode = "==" => BinOpcode::Equals;

ComparisonOp: BinOpcode = {
    "<" => BinOpcode::LessThan,
    "<=" => BinOpcode::LessThanOrEquals,
    ">" => BinOpcode::GreaterThan,
    ">=" => BinOpcode::GreaterThanOrEquals,
}

SemicolonOp: BinOpcode = ";" => BinOpcode::Semicolon;