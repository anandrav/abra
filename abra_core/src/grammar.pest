/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

 WHITESPACE = _{ space | tab | NEWLINE | COMMENT }
space = { " " }
tab = { "\t" }

COMMENT = _{ LINE_COMMENT | MULTI_LINE_COMMENT }
LINE_COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE? }
MULTI_LINE_COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

file = _{ SOI ~ file_item* ~ EOI }

file_item = _{ func_def | foreign_func_decl | host_func_decl | interface_declaration | interface_implementation | extension | enum_declaration | struct_declaration /*| typealias*/ | import | statement }

// typealias = { "type" ~ identifier ~ "=" ~ typ}

import = { "use" ~ path ~ ( import_inclusion_list | import_exclusion_list )? }
import_inclusion_list = { "." ~ import_group_or_singleton }
import_exclusion_list = { "except" ~ import_group_or_singleton }
import_group_or_singleton = _{ identifier | "(" ~ (identifier ~ ",")* ~ identifier ~ ")" }
path = @{ identifier ~ ("/" ~ identifier)* }

interface_declaration = { "interface" ~ identifier ~ interface_body }
interface_body = _{ "{" ~ interface_property* ~ "}" }
interface_property = _{ interface_method | associated_type_decl }
interface_method = { "fn" ~ identifier ~ type_annotation }
associated_type_decl = { "associatedtype" ~ identifier ~ ("impl" ~ interface_constraint*)? }

interface_implementation = { "implement" ~ identifier ~ "for" ~ typ ~ interface_implementation_body }
interface_implementation_body = _{ "{" ~ func_def* ~ "}" }

extension = { "extend" ~ typ ~ extension_body }
extension_body = _{ "{" ~ func_def* ~ "}" }

enum_declaration = { "type" ~ identifier ~ type_params? ~ "=" ~ ("|")? ~ variant ~ ("|" ~ variant)* }
type_params = _{ "<" ~ (type_poly ~ ",")* ~ type_poly? ~ ">" }
variant = { identifier ~ packed_data? }
packed_data = _{ "of" ~ typ }

struct_declaration = { "type" ~ identifier ~ type_params? ~ "=" ~ "{" ~ struct_field ~ (struct_field)* ~ "}" }
struct_field = { identifier ~ type_annotation }

statement = _{ let_statement | var_statement | set_statement | break_statement | continue_statement | return_statement | while_statement | expression_statement | if_statement }

let_statement = { let_keyword ~ let_pattern_annotated ~ op_assign ~ expression }
let_keyword = _{ "let" }
let_pattern = _{ let_pattern_tuple | wildcard | identifier }
wildcard = @{ "_" }
op_assign = _{ "=" }

return_statement = { "return" ~ expression }

expression_statement = { expression }

var_statement = { var_keyword ~ let_pattern_annotated ~ op_assign ~ expression }
var_keyword = _{ "var" }

set_statement = { expression ~ ":=" ~ expression }

continue_statement = { "continue" }
break_statement = { "break" }

func_def = { "fn" ~ identifier ~ func_args ~ func_out_annotation? ~ (block_expression | (op_assign ~ expression)) }

foreign_func_decl = { "foreign fn" ~ identifier ~ func_args_annotated ~ func_out_annotation }

host_func_decl = { "host fn" ~ identifier ~ func_args_annotated ~ func_out_annotation }

let_pattern_tuple = { tuple_start ~ (let_pattern_tuple_element ~ ",")+ ~ let_pattern_tuple_element ~ tuple_end }
let_pattern_tuple_element = _{ let_pattern }

expression = {  term ~ postfix* ~ (op_binary ~ term ~ postfix* )* }
term = _{ block_expression | func_expression | parenthesized_expression | if_else_expression | match_expression | tuple_expr | primary_expression }
postfix = _{ member_func_call | index_access | member_access | func_call | op_try | op_unwrap }

index_access = { "[" ~ expression ~ "]" }
member_access = { "." ~ identifier }

if_else_expression = { "if" ~ expression ~ expression ~ "else" ~ expression }

if_statement = { "if" ~ expression ~ block_expression }

while_statement = { "while" ~ expression ~ block_expression }

match_expression = { "match" ~ expression ~ "{" ~ (match_branch ~ ",")* ~ match_branch? ~ "}" }
match_branch = { match_pattern ~ "->" ~ statement }

match_pattern = { match_pattern_parenthesized | literal | wildcard | match_pattern_tuple | match_pattern_variant_qualified | match_pattern_variant_inferred | match_pattern_variable }
match_pattern_tuple = { tuple_start ~ (match_pattern_tuple_element ~ ",")+ ~ match_pattern_tuple_element ~ tuple_end }
match_pattern_tuple_element = _{ match_pattern }
match_pattern_variant_qualified = { identifier ~ "." ~ identifier ~ ( "." ~ identifier)* ~ match_pattern_variant_data? }
match_pattern_variant_inferred = { "." ~ identifier ~ match_pattern_variant_data? }
match_pattern_variant_data = _{ match_pattern }
match_pattern_variable = @{ identifier }
match_pattern_parenthesized = _{ paren_start ~ match_pattern ~ paren_end }

block_expression = { block_start ~ statement* ~ block_end }
block_start = _{ "{" }
block_end = _{ "}" }

tuple_expr = { tuple_start ~ (tuple_expr_element ~ ",")+ ~ tuple_expr_element ~ tuple_end }
tuple_start = _{ "(" }
tuple_end = _{ ")" }
tuple_expr_element = _{ expression }

parenthesized_expression = _{ paren_start ~ expression ~ paren_end }
paren_start = _{ "(" }
paren_end = _{ ")" }

func_call = { func_call_args }
func_call_args = _{ func_call_args_start ~ (func_call_arg ~ ",")* ~ func_call_arg? ~ func_call_args_end }
func_call_args_start = _{ "(" }
func_call_args_end = _{ ")" }
func_call_arg = _{ expression }

member_func_call = { "." ~ identifier ~ func_call_args }

func_expression = { func_expression_args ~ "->" ~ func_out_annotation? ~ expression }
func_out_annotation = { "->" ~ typ }
func_args_start = _{ "(" }
func_args_end = _{ ")" }
func_expression_args = _{ func_args | func_arg }
func_args = _{ func_args_start ~ (func_arg ~ ",")* ~ func_arg? ~ func_args_end }
func_arg = { identifier ~ (type_annotation )? }
// annotation mandatory
func_args_annotated = _{ func_args_start ~ (func_arg_annotated ~ ",")* ~ func_arg_annotated? ~ func_args_end }
func_arg_annotated = { identifier ~ type_annotation }

let_pattern_annotated = { let_pattern ~ type_annotation? }

type_annotation = _{ ":" ~ typ }
typ = _{ func_type | type_parenthesized | tuple_type | type_literal | type_ap }
typ_not_func = _{ type_parenthesized | tuple_type | type_literal | type_ap } // TODO: what the heck is typ_not_func

type_parenthesized = _{ paren_start ~ typ ~ paren_end }

func_type = { func_type_args ~ "->" ~ typ }
func_type_args = _{ func_type_arg_list | typ_not_func }
func_type_arg_list = _{ "(" ~ (func_type_arg_single ~ ",")* ~ func_type_arg_single? ~ ")" }
func_type_arg_single = _{ typ }

type_ap = { identifier ~ type_args? }
type_args = _{ "<" ~ (typ ~ ",")* ~ typ? ~ ">" }

tuple_type = { tuple_start ~ (tuple_type_element ~ ",")+ ~ tuple_type_element ~ tuple_end }
tuple_type_element = _{ typ }

type_literal = _{ type_literal_void | type_literal_int | type_literal_float | type_literal_bool | type_literal_string | type_poly }
type_literal_void = @{ "void" }
type_literal_int = @{ "int" }
type_literal_float = @{ "float" }
type_literal_bool = @{ "bool" }
type_literal_string = @{ "string" }

type_poly = { type_poly_ident ~ interface_constraint* }
type_poly_ident = @{ "'" ~ (alpha | "_") ~ (alphanumeric | "_")* } // 'a, 'b, 'c, etc.
interface_constraint = _{ identifier ~ interface_constraint_params? }
interface_constraint_params = _{ "<" ~ (associated_type_binding ~ ",")* ~ associated_type_binding? ~ ">" }
associated_type_binding = { identifier ~ "=" ~ typ }

primary_expression = _{ literal | identifier | member_access_inferred }

member_access_inferred = { "." ~ identifier }

identifier = @{ !(keyword ~ WHITESPACE) ~ ( alpha | "_") ~ (alphanumeric | "_")* }
alpha = _{ 'a'..'z' | 'A'..'Z' }
alphanumeric = _{ alpha | '0'..'9' }

literal = _{ literal_void | literal_float | literal_int | literal_bool | literal_string | literal_array }
literal_void = @{ "()" }
literal_int = @{ ("-")? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }
literal_float = @{ ("-")? ~ ("0.0" | "0." | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT* | "." ~ ASCII_DIGIT+) }
literal_string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
literal_bool = @{ "true" | "false" }
literal_array = { "[" ~ (expression ~ ",")* ~ expression? ~ "]" }

op_binary = _{op_eq | op_gte | op_lte | op_gt | op_lt | op_addition | op_subtraction | op_multiplication | op_division | op_pow | op_and | op_or | op_mod | op_concat }
op_eq = { "=" }
op_gt = { ">" }
op_lt = { "<" }
op_gte = { ">=" }
op_lte = { "<=" }
op_addition = { "+" }
op_subtraction = { "-" }
op_multiplication = { "*" }
op_division = { "/" }
op_mod = { "mod" }
op_pow = { "^" }
op_concat = { "&" }
// op_not = { "not" }
op_and = { "and" }
op_or = { "or" }

op_unwrap = { "!" }
op_try = { "?" }

// op_range_inclusive = { "..." }
// op_range_exclusive = { "..<" }

// NOTE: When changing this code, make sure you don't have a subset of a word before
// another word. For example: { "type" | "typeof" } will never match "typeof"
keyword = @{
   "and" | "bool" | "break" | "continue" | "else" | "extend" | "false" | "fn" | "foreign" | "host" | "let" | "if" | "int" | "match" | "mod" | "or" | "return" | "set" | "string" | "type" | "nothing" | "true" | "void"
}

semicolon = _{ ";" }
