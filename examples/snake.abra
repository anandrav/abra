use term
use time
use random

// types
type Point = {
  x: int
  y: int
}

implement Clone for Point {
  fn clone(p: Point) {
    Point(p.x, p.y)
  }
}

implement Equal for Point {
  fn equal(p1: Point, p2: Point) {
    (p1.x = p2.x) and (p1.y = p2.y)
  }
}

type Dir =
  | Up
  | Down
  | Left
  | Right

type Snake = {
  body: array<Point>
  direction: Dir
}

type Fruit = {
  location: Point
}

// game logic

fn main() {
  let width = 20
  let height = 20
  let snake = Snake([Point(12, 10), Point(11, 10), Point(10, 10), Point(9, 10), Point(8, 10)], Dir.Right)
  let fruit = Fruit(Point(4, 5))

  var quit = false

  // game loop
  enable_raw_mode()
  hide_cursor()
  while true {
    clear()
    draw_border(width, height)
    snake.display()
    fruit.display()
    flush()

    let start_time = get_time()

    while poll_key_event() {
      match get_key_event() {
        .Left -> snake.direction := .Left,
        .Char("a") -> snake.direction := .Left,
        .Right -> snake.direction := .Right,
        .Char("d") -> snake.direction := .Right,
        .Up -> snake.direction := .Up,
        .Char("w") -> snake.direction := .Up,
        .Down -> snake.direction := .Down,
        .Char("s") -> snake.direction := .Down,
        .Char("q") -> quit := true,
        .Esc -> quit := true,
        _ -> {}
      }
    }

    if quit {
      break
    }

    update(snake, fruit, width, height)

    let now = get_time()
    let end_time = start_time + 200.0 / 1000.0
    let diff = end_time - now
    if diff > 0.0 {
      sleep(diff)
    }
  }
  // cleanup
  clear()
  disable_raw_mode()
  show_cursor()
  flush()
}

// helper functions
extend Snake {
  fn display(self) {
    var i = 0
    while i < len(self.body) {
      let x = self.body[i].x
      let y = self.body[i].y

      mark("O", x+1, y+1)

      i := i + 1
    }
  }
}

extend Fruit {
  fn display(self) {
    let x = self.location.x
    let y = self.location.y
    mark("*", x+1, y+1)
  }
}

fn update(snake: Snake, fruit: Fruit, width, height) {
  let new_head = clone(snake.body[0])
  match snake.direction {
    .Up -> new_head.y := new_head.y - 1,
    .Down -> new_head.y := new_head.y + 1,
    .Left -> new_head.x := new_head.x - 1,
    .Right -> new_head.x := new_head.x + 1
  }

  let fruit_was_eaten = new_head = fruit.location

  let body = snake.body
  let len = len(body)
  
  var i = if fruit_was_eaten {
    body.push(Point(0,0))
    len - 1
  } else {
    len - 2 
  }
  while i >= 0 {
    body[i+1] := body[i]
    i := i - 1
  }
  
  body[0] := new_head

  if fruit_was_eaten {
    let num_valid_locations = width * height - snake.body.len()
    var found = false
    var point = Point(0, 0)
    while not(found) {
      let index = random_int(0, num_valid_locations)
      point := index_to_point(index, width, height)

      var in_snake = false
      var i = 0
      while i < snake.body.len() {
        if snake.body[i] = point {
          in_snake := true
        }
        i := i + 1
      }

      found := not(in_snake)
    }

    fruit.location := point
  }
}

fn index_to_point(index: int, width: int, height: int) -> Point {
  let x = index mod width
  let y = index / width
  Point(x, y)
}

fn draw_border(width: int, height: int) {
  var i = 0
  while i < width+2 {
    mark("X", i, height+1)
    mark("X", i, 0)
    i := i + 1
  }

  var i = 0
  while i < height+2 {
    mark("X", width+1, i)
    mark("X", 0, i)
    i := i + 1
  }
}

main()
