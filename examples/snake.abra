use term
use time

//println("hello from snake")

// types
type Point = {
  x: int
  y: int
}

// TODO: need to make enums properly namespaced
type Direction = 
  | DirUp
  | DirDown
  | DirLeft
  | DirRight

type Snake = {
  body: array<Point>
  direction: Direction
}

// game logic

// TODO: this causes a crash
// let snake = Snake([Point(10, 10)], DirRight)

fn main() {
  // println("main")
  let snake = Snake([Point(12, 10), Point(11, 10), Point(10, 10), Point(9, 10), Point(8, 10)], Direction.DirRight)
  var quit = false

  // game loop
  enable_raw_mode()
  hide_cursor()
  while true {
    // println("game loop")
    let start_time = get_time()

    while poll_key_event() {
      // println("got event")
      match get_key_event() {
        | KeyCode.Left -> { snake.direction <- Direction.DirLeft }
        | KeyCode.Char("a") -> { snake.direction <- Direction.DirLeft }
        | KeyCode.Right -> { snake.direction <- Direction.DirRight }
        | KeyCode.Char("d") -> { snake.direction <- Direction.DirRight }
        | KeyCode.Up -> { snake.direction <- Direction.DirUp }
        | KeyCode.Char("w") -> { snake.direction <- Direction.DirUp }
        | KeyCode.Down -> { snake.direction <- Direction.DirDown }
        | KeyCode.Char("s") -> { snake.direction <- Direction.DirDown }
        | KeyCode.Char("q") -> { quit <- true }
        | KeyCode.Esc -> { quit <- true }
        | _ -> {}      
      }
    }

    if quit {
      break
    }

    update_snake(snake)

    let now = get_time()
    let end_time = start_time + 200.0 / 1000.0
    let diff = end_time - now
    if diff > 0.0 {
      sleep(diff)
    }

    clear()
    // TODO: passing no arguments to this results in crash
    display_snake(snake)
    flush()
  }
  // cleanup
  clear()
  disable_raw_mode()
  show_cursor()
  flush()
}

main()

// helper functions
fn display_snake(snake: Snake) {
  var i = 0
  while i < len(snake.body) {
    let x = snake.body[i].x
    let y = snake.body[i].y

    mark("O", x, y)

    i <- i + 1
  }
}

fn update_snake(snake: Snake) {
  let body = snake.body
  // TODO: if l is named len instead, stack overflow (need occurs check)
  let l = len(body)
  
  // TODO: if this i is commented out, error is not detected in static analysis
  var i = l - 2
  while i >= 0 {
    body[i+1] <- body[i]
    i <- i - 1
  }
  
  body[0] <- Point(body[1].x, body[1].y)
  match snake.direction {
    | Direction.DirUp -> { body[0].y <- body[0].y - 1 }
    | Direction.DirDown -> { body[0].y <- body[0].y + 1 }
    | Direction.DirLeft -> { body[0].x <- body[0].x - 1 }
    | Direction.DirRight -> { body[0].x <- body[0].x + 1 }
  } 
}

