use term
use time

// types
type Point = {
  x: int
  y: int
}

implement Clone for Point {
  fn clone(p: Point) {
    Point(p.x, p.y)
  }
}

implement Equal for Point {
  fn equal(p1: Point, p2: Point) {
    (p1.x = p2.x) and (p1.y = p2.y)
  }
}

type Dir =
  | Up
  | Down
  | Left
  | Right

type Snake = {
  body: array<Point>
  direction: Dir
}

type Fruit = {
  location: Point
}

// game logic

fn main() {
  let snake = Snake([Point(12, 10), Point(11, 10), Point(10, 10), Point(9, 10), Point(8, 10)], Dir.Right)
  let fruit = Fruit(Point(4, 5))

  var quit = false

  // game loop
  enable_raw_mode()
  hide_cursor()
  while true {
    clear()
    snake.display()
    fruit.display()
    flush()

    let start_time = get_time()

    while poll_key_event() {
      match get_key_event() {
        .Left -> snake.direction := .Left,
        .Char("a") -> snake.direction := .Left,
        .Right -> snake.direction := .Right,
        .Char("d") -> snake.direction := .Right,
        .Up -> snake.direction := .Up,
        .Char("w") -> snake.direction := .Up,
        .Down -> snake.direction := .Down,
        .Char("s") -> snake.direction := .Down,
        .Char("q") -> quit := true,
        .Esc -> quit := true,
        _ -> {}
      }
    }

    if quit {
      break
    }

    update(snake, fruit)

    let now = get_time()
    let end_time = start_time + 200.0 / 1000.0
    let diff = end_time - now
    if diff > 0.0 {
      sleep(diff)
    }
  }
  // cleanup
  clear()
  disable_raw_mode()
  show_cursor()
  flush()
}

// helper functions
extend Snake {
  fn display(self) {
    var i = 0
    while i < len(self.body) {
      let x = self.body[i].x
      let y = self.body[i].y

      mark("O", x, y)

      i := i + 1
    }
  }
}

extend Fruit {
  fn display(self) {
    let x = self.location.x
    let y = self.location.y
    mark("*", x, y)
  }
}

fn update(snake: Snake, fruit: Fruit) {
  let new_head = clone(snake.body[0])
  match snake.direction {
    .Up -> new_head.y := new_head.y - 1,
    .Down -> new_head.y := new_head.y + 1,
    .Left -> new_head.x := new_head.x - 1,
    .Right -> new_head.x := new_head.x + 1
  }

  let fruit_was_eaten = new_head = fruit.location
  println("fruit_was_eaten: " & fruit_was_eaten)
  println(new_head.x)
  println(new_head.y)
  println(fruit.location.x)
  println(fruit.location.y)
  println(new_head.x = fruit.location.x)
  println(new_head.y = fruit.location.y)
  println((new_head.x = fruit.location.x) and (new_head.y = fruit.location.y))

  let body = snake.body
  let len = len(body)
  
  var i = if fruit_was_eaten {
    body.push(Point(0,0))
    len - 1
  } else {
    len - 2 
  }
  while i >= 0 {
    body[i+1] := body[i]
    i := i - 1
  }
  
  body[0] := new_head
}

main()