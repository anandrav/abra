use term
use time
use random

// types
type Point = {
  x: int
  y: int
}

implement Clone for Point {
  fn clone(p: Point) {
    Point(p.x, p.y)
  }
}

implement Equal for Point {
  fn equal(p1: Point, p2: Point) {
    (p1.x == p2.x) and (p1.y == p2.y)
  }
}

type Dir =
  | Up
  | Down
  | Left
  | Right

type Snake = {
  body: array<Point>
  direction: Dir
}

type Fruit = {
  location: Point
}

type Status =
  | Playing
  | Lost
  | Won

implement Equal for Status {
  fn equal(s1: Status, s2: Status) {
    match (s1, s2) {
      (.Playing, .Playing) -> true,
      (.Lost, .Lost) -> true,
      (.Won, .Won) -> true,
      _ -> false,
    }
  }
}

type State = {
  width: int
  height: int
  snake: Snake
  fruit: Fruit
  score: int
  status: Status
  quit: bool
}

// game logic

fn main() {
  let st = State(20, 20, 
                    Snake([Point(12, 10), Point(11, 10), Point(10, 10), Point(9, 10), Point(8, 10)], .Right),
                    Fruit(Point(4, 5)), 
                    0,
                    .Playing,
                    false)

  // game loop
  enable_raw_mode()
  hide_cursor()
  while true {
    clear()
    draw_border(st)
    match st.status {
      .Playing -> {
        st.snake.display()
        st.fruit.display()
      },
      .Lost -> {
        display_game_over()
      },
      .Won -> {
        display_win_screen()
      },
    }
    flush()

    let start_time = get_time()

    while poll_key_event() {
      let snake = st.snake
      match get_key_event() {
        .Left -> snake.direction = .Left,
        .Char("a") -> snake.direction = .Left, .Right -> snake.direction = .Right,
        .Char("d") -> snake.direction = .Right,
        .Up -> snake.direction = .Up,
        .Char("w") -> snake.direction = .Up,
        .Down -> snake.direction = .Down,
        .Char("s") -> snake.direction = .Down,
        .Char("q") -> st.quit = true,
        .Esc -> st.quit = true,
        _ -> {}
      }
    }

    if st.quit {
      break
    }

    if st.status == Status.Playing { // TODO: shouldn't have to qualify
      update(st)
    }

    let now = get_time()
    let end_time = start_time + 200.0 / 1000.0
    let diff = end_time - now
    if diff > 0.0 {
      sleep(diff)
    }
  }
  // cleanup
  clear()
  disable_raw_mode()
  show_cursor()
  flush()
}

// helper functions
extend Snake {
  fn display(self) {
    for seg in self.body {
      mark("O", seg.x+1, seg.y+1)
    }
  }
}

extend Fruit {
  fn display(self) {
    let x = self.location.x
    let y = self.location.y
    mark("*", x+1, y+1)
  }
}

fn update(st: State) {
  let snake = st.snake
  let fruit = st.fruit
  let width = st.width
  let height = st.height

  let new_head = snake.body[0].clone()
  match snake.direction {
    .Up -> new_head.y = new_head.y - 1,
    .Down -> new_head.y = new_head.y + 1,
    .Left -> new_head.x = new_head.x - 1,
    .Right -> new_head.x = new_head.x + 1
  }

  if out_of_bounds(new_head, width, height) or snake.body.contains(new_head) {
    st.status = Status.Lost // TODO: shouldn't have to qualify
    return ()
  }

  let fruit_was_eaten = (new_head == fruit.location)

  let body = snake.body
  let len = body.len()
  
  var i = if fruit_was_eaten {
    body.push(Point(0,0))
    len - 1
  } else {
    len - 2 
  }
  while i >= 0 {
    body[i+1] = body[i]
    i = i - 1
  }
  
  body[0] = new_head

  if fruit_was_eaten {
    st.score = st.score + 1

    let num_valid_locations = width * height - snake.body.len()
    var found = false
    var point = Point(0, 0)
    while not(found) {
      let index = random_int(0, num_valid_locations)
      point = index_to_point(index, width, height)

      found = not(snake.body.contains(point))
    }

    fruit.location = point
  }
}

fn index_to_point(index: int, width: int, height: int) -> Point {
  let x = index mod width
  let y = index / width
  Point(x, y)
}

fn out_of_bounds(p: Point, width, height) -> bool {
  (p.x < 0) or (p.x >= width) or (p.y < 0) or (p.y >= height)
}

fn draw_border(st: State) {
  let width = st.width
  let height = st.height
  for i in range(width+2) {
    mark("X", i, height+1)
    mark("X", i, 0)
  }

  for i in range(height+2) {
    mark("X", width+1, i)
    mark("X", 0, i)
  }
  mark("SCORE: " & st.score, 0, height+2)

  mark("HIT 'Q' TO QUIT", 0, height+3)
}

fn display_game_over() {
  mark("GAME OVER", 6, 5)
}

fn display_win_screen() {
  mark("YOU WIN", 5, 5)
}

main()
