{
	"name": "Abra",
	"scopeName": "source.abra",
	"fileTypes": [
		"abra"
	],
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#types"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#identifiers"
		},
		{
			"include": "#functions"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.abra",
					"match": "//.*$"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.abra",
					"match": "\\b(let|var|if|else|while|fn|match|type|interface|implement|use|for)\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.abra",
					"match": "\\b(bool|int|float|string|void)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.abra",
					"match": "(\\+|\\-|\\*|\\/|&|\\.|<\\-|>=|<=|>|<|=|mod|and|or|\\^)"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "constant.language.boolean.abra",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.numeric.float.abra",
					"match": "\\b[-+]?[0-9]*\\.[0-9]+\\b"
				},
				{
					"name": "constant.numeric.integer.abra",
					"match": "\\b[-+]?[0-9]+\\b"
				},
				{
					"name": "string.quoted.double.abra",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.abra",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"name": "variable.parameter.abra",
					"match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "entity.name.function.abra",
					"match": "\\b(fn)\\s+([_a-zA-Z][_a-zA-Z0-9]*)"
				}
			]
		}
	}
}